using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace Secure_CSP_Server
{
    public partial class index : System.Web.UI.Page
    {
        protected string HeaderCSP
        {
            get
            {
                var data = "";
                if (Options.Enabled)
                {
                    if (Options.ReportUrlEnabled)
                    {
                        data += string.Format("report-uri {0};\r\n", Options.ReportUrl);
                    }

                    if (!string.IsNullOrEmpty(Options.Defaults.Value))
                    {
                        data += string.Format("{0}-src ", Options.Defaults.Ident) + Options.Defaults.Value.Replace("\r\n", " ") + ";\r\n";
                    }
                    foreach (var source in Options.Sources.Where(s => s.Enabled))
                    {
                        if (!string.IsNullOrEmpty(source.Value))
                        {
                            data += string.Format("{0}-src ", source.Ident) + source.Value.Replace("\r\n", " ") + ";\r\n";
                        }
                    }
                }
                return data;
            }
        }

        protected ContentSecurityOptions Options
        {
            get
            {
                var opts = Session["CSP_OPTIONS"] as ContentSecurityOptions;
                if (opts == null)
                {
                    var sessionId = Guid.NewGuid();
                    opts = new ContentSecurityOptions
                    {
                        Enabled = true,
                        SessionID = sessionId,
                        BaseUrl = @"\",
                        BaseUrlEnabled = false,
                        ReportUrl = "/index.aspx?report=tracker&session=" + sessionId,
                        ReportUrlEnabled = true,
                        Defaults = new ContentSecuritySources
                        {
                            Ident = "default",
                            Value = @"'self' 'unsafe-inline'",
                            Enabled = true,
                        },
                        Sources = new List<ContentSecuritySources> { 
                            new ContentSecuritySources { Ident = "script", Value = @"'self' 'unsafe-inline'
https://cdnjs.cloudflare.com
https://maxcdn.bootstrapcdn.com
https://code.jquery.com", Enabled=true },
                            new ContentSecuritySources { Ident = "style", Value = @"'self' 'unsafe-inline'
https://cdnjs.cloudflare.com
https://maxcdn.bootstrapcdn.com", Enabled=true },
                            new ContentSecuritySources { Ident = "font", Value = @"https://cdnjs.cloudflare.com
https://maxcdn.bootstrapcdn.com", Enabled=true },
                            new ContentSecuritySources { Ident = "child", Value = @"" },
                            new ContentSecuritySources { Ident = "img", Value = @"" },
                            new ContentSecuritySources { Ident = "object", Value = @"'none'" },
                            new ContentSecuritySources { Ident = "media", Value = @"" },
                            new ContentSecuritySources { Ident = "connect", Value = @"" },
                        },
                    };
                    Session["CSP_OPTIONS"] = opts;
                }
                return opts;
            }
        }

        protected static List<ContentSecurityReport> Reports = new List<ContentSecurityReport>();

        protected void Page_Load(object sender, EventArgs e)
        {
            try
            {
                if (Request.HttpMethod == "POST")
                {
                    // Track CSP violation by inspecting the report 
                    // This report was generated by the client-side browser
                    var reportType = Request.Params["report"];
                    if (reportType != null) GenerateReport();
                    return;
                }
                else if (Request.Params["reset"] != null)
                {
                    ResetOptions();
                }
                else if (Request.Params["clear"] != null)
                {
                    ClearReports(null);
                    Response.Redirect(Request.Path, true);
                }
                else if (!Page.IsPostBack)
                {
                    InitUI(Options);
                }                
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        protected override void OnPreRenderComplete(EventArgs e)
        {
            base.OnPreRenderComplete(e);

            if (Options.Enabled)
            {
                Response.Headers.Add("Content-Security-Policy", HeaderCSP.Replace("\r\n", " ").Replace("\n", " "));
            }
        }

        private void ClearReports(string sessionID)
        {
            Reports.RemoveAll(r => r.SessionID == sessionID || sessionID == null);
        }

        private void ResetOptions()
        {
            var sessionID = Options.SessionID.ToString();
            ClearReports(sessionID);
            Session["CSP_OPTIONS"] = null;
            Response.Redirect(Request.Path, true);
        }

        protected void Page_PreRenderComplete(object sender, EventArgs e)
        {
            mvHeader.ActiveViewIndex = Options.Enabled ? 0 : 1;
            mvToggleActiveMain.ActiveViewIndex = Options.Enabled ? 0 : 1;

            txtReportURI.Enabled = Options.ReportUrlEnabled;
            txtBaseURI.Enabled = Options.BaseUrlEnabled;

            var val = mvContents.ActiveViewIndex.ToString();
            foreach (ListItem itm in blLeftMenu.Items)
            {
                if (itm.Value == val)
                {
                    itm.Attributes["class"] = "active";
                }
                else
                {
                    itm.Attributes["class"] = "";
                }
            }
        }

        private void InitUI(ContentSecurityOptions Options)
        {
            mvContents.ActiveViewIndex = Options.ViewIndex;
            DataBind();
        }

        private void GenerateReport()
        {
            var json = GetReportData();
            if (!string.IsNullOrEmpty(json))
            {
                var rpt = new ContentSecurityReport(json)
                {
                    SessionID = Request.Params["session"]
                };
                Reports.Add(rpt);
            }
        }

        private string GetReportData()
        {
            Request.InputStream.Position = 0;
            using (var inputStream = new StreamReader(Request.InputStream))
            {
                var s = inputStream.ReadToEnd();
                return !string.IsNullOrWhiteSpace(s) ? s : null;
            }
        }

        protected int CountLines(object input)
        {
            var size = 0;
            var text = input != null ? input.ToString() : null;
            if (!string.IsNullOrEmpty(text))
            {
                size = input.ToString().Split('\n').Count();
            }
            return size + 1;
        }

        protected void RefreshSources()
        {
            var sourceList = viewSettings.FindControl("SourceList") as Repeater;
            if (sourceList != null)
            {
                sourceList.DataBind();
            }
        }

        // ==============================================================================================

        protected void lnkSecure_Click(object sender, EventArgs e)
        {
            Options.Enabled = !Options.Enabled;
        }

        protected void blLeftMenu_Click(object sender, BulletedListEventArgs e)
        {
            var val = blLeftMenu.Items[e.Index].Value;
            mvContents.ActiveViewIndex = Options.ViewIndex = int.Parse(val);
        }

        protected void lnkViewSettings_Click(object sender, EventArgs e)
        {
            mvContents.ActiveViewIndex = 2;
        }

        protected void chkEnableReportURL_CheckedChanged(object sender, EventArgs e)
        {
            Options.ReportUrlEnabled = !Options.ReportUrlEnabled;
        }

        protected void chkEnableBaseURI_CheckedChanged(object sender, EventArgs e)
        {
            Options.BaseUrlEnabled = !Options.BaseUrlEnabled;
        }

        protected void cspOption_CheckedChanged(object sender, EventArgs e)
        {
            var checkBox = sender as CheckBox;
            if (checkBox != null)
            {
                var option = Options.Sources.FirstOrDefault(opt => opt.Ident == checkBox.Text);
                if (option != null)
                {
                    option.Enabled = checkBox.Checked;
                }
            }
            RefreshSources();
        }

        protected void btnReset_Click(object sender, EventArgs e)
        {
            Session["CSP_OPTIONS"] = null;
            Response.Redirect(Request.Url.PathAndQuery, true);
        }

        protected void btnSubmit_Click(object sender, EventArgs e)
        {
            Response.Redirect(Request.Url.PathAndQuery, true);
        }

        protected void txtValue_TextChanged(object sender, EventArgs e)
        {
            var textBox = sender as TextBox;
            if (textBox != null)
            {
                var option = Options.Sources.ToList().Concat(new[] { Options.Defaults }).FirstOrDefault(opt => opt.Ident == textBox.ToolTip);
                if (option != null)
                {
                    option.Value = textBox.Text;
                }
            }
            RefreshSources();
        }

        protected void btnShowPolicy_Click(object sender, EventArgs e)
        {
            mvContents.ActiveViewIndex = 1;
        }

        protected void btnViewReports_Click(object sender, EventArgs e)
        {
            mvContents.ActiveViewIndex = 3;
        }

        protected void LinkButton1_Click(object sender, EventArgs e)
        {

        }

        protected void lnkToggleExpand_Click(object sender, EventArgs e)
        {
            var link = sender as LinkButton;
            if (link != null)
            {
                var contents = link.Parent.FindControl("ItemContents") as Panel;
                if (contents != null)
                {
                    contents.Visible = !contents.Visible;
                }                
            }

            Options.ViewIndex = mvContents.ActiveViewIndex = 3;
        }

        protected void RefreshList_Click(object sender, EventArgs e)
        {
            DataBind();
        }

        protected void ClearList_Click(object sender, EventArgs e)
        {
            var sessionID = Options.SessionID.ToString();
            ClearReports(sessionID);
            DataBind();
        }

    }

    public class ContentSecurityOptions
    {
        public bool Enabled { get; set; }

        public string BaseUrl { get; set; }
        public bool BaseUrlEnabled { get; set; }

        public string ReportUrl { get; set; }
        public bool ReportUrlEnabled { get; set; }

        public ContentSecuritySources Defaults { get; set; }
        public List<ContentSecuritySources> Sources { get; set; }

        public int ViewIndex { get; set; }

        public Guid SessionID { get; set; }
    }

    public class ContentSecuritySources
    {
        public bool Enabled { get; set; }
        public string Ident { get; set; }
        public string Value { get; set; }
    }

    public class ContentSecurityReport
    {
        public string SessionID { get; set; }
        public string RawText { get; set; }
        public CspReport Data { get; set; }
        public DateTime CreatedAt { get; set; }

        public ContentSecurityReport(string input)
        {
            ParseInput(input);
        }

        private void ParseInput(string input)
        {
            RawText = JsonConvert.SerializeObject(JsonConvert.DeserializeObject(input), Formatting.Indented);
            CreatedAt = DateTime.Now;
            Data = new CspReport();
            try
            {
                dynamic report = JsonConvert.DeserializeObject(input);
                dynamic data = report["csp-report"];
                if (data != null)
                {
                    Data.DocumentUri = data["document-uri"];
                    Data.Referrer = data["referrer"];
                    Data.ViolatedDirective = data["violated-directive"];
                    Data.EffectiveDirective = data["effective-directive"];
                    Data.OriginalPolicy = data["original-policy"];
                    Data.BlockedUri = data["blocked-uri"];
                    Data.StatusCode = data["status-code"];
                }

                if (!string.IsNullOrEmpty(Data.BlockedUri))
                {
                    Data.Description = string.Format("JavaScript Blocked! Remote Resource: {0}", Data.BlockedUri);
                }
                else
                {
                    Data.Description = string.Format("Refused to load {0}, because it violates the following Content Security Policy directive: {1}", ResolveDirectiveType(Data.EffectiveDirective), Data.EffectiveDirective);
                }
            }
            catch (Exception ex)
            {
                Trace.TraceError(ex.Message);
            }
        }

        protected string ResolveDirectiveType(string directive)
        {
            switch (directive)
            {
                case "script-src": return "Javascript";
                case "child-src": return "Child Object";
                case "connect-src": return "Connection";
                case "font-src": return "Font";
                case "frame-src": return "IFrame";
                case "img-src": return "Image";
                case "media-src": return "Media";
                case "object-src": return "Page Object";
                case "plugin-types": return "Plugin";
                case "style-src": return "Style Sheet";
                case "form-action": return "Form Action";
                case "default-src": return "Resource";
            }
            return "Unknown";
        }

    }

    public class CspReport
    {
        public int StatusCode { get; set; }
        public string DocumentUri { get; set; }
        public string Referrer { get; set; }
        public string ViolatedDirective { get; set; }
        public string EffectiveDirective { get; set; }
        public string OriginalPolicy { get; set; }
        public string BlockedUri { get; set; }

        public string Description { get; set; }
    }

}